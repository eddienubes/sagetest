---
import { getImage, type LocalImageProps, type RemoteImageProps } from 'astro:assets';
import type { HTMLAttributes } from "astro/types";

// The TypeScript diagnostic for JSX props uses the last member of the union to suggest props, so it would be better for
// LocalImageProps to be last. Unfortunately, when we do this the error messages that remote images get are complete nonsense
// Not 100% sure how to fix this, seems to be a TypeScript issue. Unfortunate.
type Props = LocalImageProps | RemoteImageProps;

const props = Astro.props;

// As a convenience, allow width and height to be string with a number in them, to match HTML's native `img`.
if (typeof props.width === 'string') {
  props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
  props.height = parseInt(props.height);
}

const image = await getImage(props);

const additionalAttributes: HTMLAttributes<'img'> = {};
if (image.srcSet.values.length > 0) {
  additionalAttributes.srcset = image.srcSet.attribute;
}
---

<div class="wrapper">
  <div class="glow-bg"></div>
  <img src={ image.src } {...additionalAttributes} {...image.attributes}/>
</div>


<style>
    .wrapper {
        position: relative;
    }

    .glow-bg {
        height: 100%;
        width: 100%;
        border-radius: 50%;
        position: absolute;
        background-image: radial-gradient(rgb(64, 252, 228) 30%, #edd53260);
        filter: blur(100px);
        z-index: -1;
    }
</style>
